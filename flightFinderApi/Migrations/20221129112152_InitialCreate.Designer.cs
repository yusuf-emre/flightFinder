// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace flightFinderApi.Migrations
{
    [DbContext(typeof(FlightContext))]
    [Migration("20221129112152_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("flightFinderApi.Models.Flight", b =>
                {
                    b.Property<string>("FlightId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArrivalDestination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureDestination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlightId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("flightFinderApi.Models.Itinerary", b =>
                {
                    b.Property<int>("ItineraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItineraryId"), 1L, 1);

                    b.Property<DateTime>("ArriveAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ItineraryId");

                    b.HasIndex("FlightId");

                    b.ToTable("Itineraries");
                });

            modelBuilder.Entity("flightFinderApi.Models.Price", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceId"), 1L, 1);

                    b.Property<int>("AdultPrice")
                        .HasColumnType("int");

                    b.Property<int>("ChildPrice")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItineraryId")
                        .HasColumnType("int");

                    b.HasKey("PriceId");

                    b.HasIndex("ItineraryId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("flightFinderApi.Models.Itinerary", b =>
                {
                    b.HasOne("flightFinderApi.Models.Flight", null)
                        .WithMany("Itineraries")
                        .HasForeignKey("FlightId");
                });

            modelBuilder.Entity("flightFinderApi.Models.Price", b =>
                {
                    b.HasOne("flightFinderApi.Models.Itinerary", null)
                        .WithMany("Prices")
                        .HasForeignKey("ItineraryId");
                });

            modelBuilder.Entity("flightFinderApi.Models.Flight", b =>
                {
                    b.Navigation("Itineraries");
                });

            modelBuilder.Entity("flightFinderApi.Models.Itinerary", b =>
                {
                    b.Navigation("Prices");
                });
#pragma warning restore 612, 618
        }
    }
}
